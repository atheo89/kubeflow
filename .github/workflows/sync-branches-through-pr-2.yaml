---
name: Sync Branches

on:
  workflow_dispatch:
    inputs:
      source:
        description: "Source branch: From"
        required: true
        type: string
      target:
        description: "Target branch: To"
        required: true
        type: string

jobs:
  sync-branches:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Ensure full history is fetched for merging

    - name: Set up Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Merge source branch into target with conflict resolution
      id: merge
      run: |
        set -e
        SOURCE_BRANCH="${{ github.event.inputs.source }}"
        TARGET_BRANCH="${{ github.event.inputs.target }}"

        git fetch origin ${TARGET_BRANCH}:${TARGET_BRANCH}
        git checkout ${TARGET_BRANCH}

        git fetch origin ${SOURCE_BRANCH}:${SOURCE_BRANCH}
        git merge --no-commit origin/${SOURCE_BRANCH} || true

        # Resolve conflicts for specific files
        FILES=(
          "components/notebook-controller/config/overlays/openshift/params.env"
          "components/odh-notebook-controller/config/base/params.env"
        )

        for FILE in "${FILES[@]}"; do
          if [[ -f "$FILE" && "$(git status --porcelain=v1 2>/dev/null | grep -c "$FILE")" -gt 0 ]]; then
            echo "Resolving conflict for $FILE by keeping target branch version."
            git checkout --ours "$FILE"
            git add "$FILE"
          fi
        done

        # Special handling for the Makefile
        MAKEFILE="components/odh-notebook-controller/Makefile"
        if [[ -f "$MAKEFILE" && "$(git status --porcelain=v1 2>/dev/null | grep -c "$MAKEFILE")" -gt 0 ]]; then
          if git diff --ours "$MAKEFILE" | grep -q 'KF_TAG \?='; then
            echo "Change in Makefile is limited to KF_TAG. Keeping target branch version."
            git checkout --ours "$MAKEFILE"
          else
            echo "Changes in Makefile are not limited to KF_TAG. Applying incoming changes."
            git checkout --theirs "$MAKEFILE"
          fi
          git add "$MAKEFILE"
        fi

        # Commit the merge changes
        git commit -m "Merge ${SOURCE_BRANCH} into ${TARGET_BRANCH} with resolved conflicts" || echo "Nothing to commit"

        # Create a new branch for the sync
        TIMESTAMP=$(date +'%Y%m%d%H%M%S')
        SYNC_BRANCH="sync__${SOURCE_BRANCH}__${TARGET_BRANCH}__${TIMESTAMP}"
        git checkout -b $SYNC_BRANCH
        git push origin $SYNC_BRANCH
        echo "branch=$SYNC_BRANCH" >> $GITHUB_OUTPUT

    - name: Create a Pull Request
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        SOURCE_BRANCH="${{ github.event.inputs.source }}"
        TARGET_BRANCH="${{ github.event.inputs.target }}"
        SYNC_BRANCH=$(echo "${{ steps.merge.outputs.branch }}")
        gh pr create \
          --title "Sync ${SOURCE_BRANCH} into ${TARGET_BRANCH}" \
          --body ":robot: This is an automated PR generated by `/.github/workflows/sync-branches-through-pr.yaml`" \
          --base "${{ github.event.inputs.target }}" \
          --head "${SYNC_BRANCH}"

  delete-branch:
    if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest

    steps:
    - name: Delete branch
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        BRANCH_NAME=$(echo "${{ github.event.pull_request.head.ref }}")
        REPO=${{ github.repository }}
        echo "Deleting branch ${BRANCH_NAME} from ${REPO}..."
        gh api -X DELETE \
          repos/${REPO}/git/refs/heads/${BRANCH_NAME}
