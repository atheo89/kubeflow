name: Sync Branches

on:
  workflow_dispatch:
    inputs:
      source:
        description: "From:"
        required: true
        type: string
      target:
        description: "To:"
        required: true
        type: string
      generate-pr:
        description: "Generate a pull request?"
        required: true
        type: boolean
  workflow_call:
    inputs:
      source:
        description: "From:"
        required: true
        type: string
      target:
        description: "To:"
        required: true
        type: string
      generate-pr:
        description: "Generate a pull request?"
        required: true
        type: boolean

jobs:
  sync-branches:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Merge source branch into target with conflict resolution
      id: merge
      run: |
        set -e
        SOURCE_BRANCH="${{ inputs.source }}"
        TARGET_BRANCH="${{ inputs.target }}"

        git fetch origin $TARGET_BRANCH:$TARGET_BRANCH
        git checkout $TARGET_BRANCH

        git fetch origin $SOURCE_BRANCH:$SOURCE_BRANCH
        git merge --no-commit origin/$SOURCE_BRANCH || true

        FILES=(
          "components/notebook-controller/config/overlays/openshift/params.env"
          "components/odh-notebook-controller/config/base/params.env"
          "components/odh-notebook-controller/makefile-vars.mk"
        )

        for FILE in "${FILES[@]}"; do
          if [[ -f "$FILE" && "$(git status --porcelain=v1 2>/dev/null | grep -c "$FILE")" -gt 0 ]]; then
            echo "Resolving conflict for $FILE by keeping target branch version."
            git checkout --ours "$FILE"
            git add "$FILE"
          fi
        done

        if [[ -n "$(git status --porcelain)" ]]; then
          git commit -m "Merge ${SOURCE_BRANCH} into ${TARGET_BRANCH} with resolved conflicts"
        else
          echo "No changes to commit. Skipping sync branch creation."
          exit 0
        fi

        TIMESTAMP=$(date +'%Y%m%d%H%M%S')
        SYNC_BRANCH="sync__${SOURCE_BRANCH}__${TARGET_BRANCH}__${TIMESTAMP}"
        git checkout -b $SYNC_BRANCH
        git push origin $SYNC_BRANCH
        echo "branch=$SYNC_BRANCH" >> $GITHUB_OUTPUT

    - name: Create a Pull Request
      if: success() && steps.merge.outputs.branch != '' && inputs.generate-pr == true
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        SOURCE_BRANCH="${{ inputs.source }}"
        TARGET_BRANCH="${{ inputs.target }}"
        SYNC_BRANCH="${{ steps.merge.outputs.branch }}"
        gh pr create \
          --title "Sync ${SOURCE_BRANCH} into ${TARGET_BRANCH}" \
          --body ":robot: This is an automated PR generated by sync-branches-through-pr.yaml" \
          --base "$TARGET_BRANCH" \
          --head "$SYNC_BRANCH"

    - name: Auto-Merge Changes
      if: success() && inputs.generate-pr == false
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -e
        git fetch origin
        git checkout $TARGET_BRANCH
        git branch --set-upstream-to=origin/$TARGET_BRANCH $TARGET_BRANCH
        git merge --no-ff $SYNC_BRANCH -m ":robot: Auto-merged changes from $SYNC_BRANCH"
        git push origin $TARGET_BRANCH
