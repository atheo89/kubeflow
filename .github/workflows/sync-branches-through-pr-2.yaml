---
name: Sync Branches

on:
  workflow_dispatch:
    inputs:
      source:
        description: "From:"
        required: true
        type: string
      target:
        description: "To:"
        required: true
        type: string
  workflow_call:
    inputs:
      source:
        description: "From:"
        required: true
        type: string
      target:
        description: "To:"
        required: true
        type: string

jobs:
  sync-branches:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set Variables
      run: |
        # Support both workflow_call and workflow_dispatch
        if [[ -n "${{ inputs.source }}" && -n "${{ inputs.target }}" ]]; then
          SOURCE_BRANCH="${{ inputs.source }}"
          TARGET_BRANCH="${{ inputs.target }}"
        else
          SOURCE_BRANCH="${{ github.event.inputs.source }}"
          TARGET_BRANCH="${{ github.event.inputs.target }}"
        fi
        echo "SOURCE_BRANCH=$SOURCE_BRANCH" >> $GITHUB_ENV
        echo "TARGET_BRANCH=$TARGET_BRANCH" >> $GITHUB_ENV

    - name: Merge source branch into target with conflict resolution
      id: merge
      run: |
        set -e
        git fetch origin $TARGET_BRANCH:$TARGET_BRANCH
        git checkout $TARGET_BRANCH
        git fetch origin $SOURCE_BRANCH:$SOURCE_BRANCH
        git merge --no-commit origin/$SOURCE_BRANCH || true

        FILES=(
          "components/notebook-controller/config/overlays/openshift/params.env"
          "components/odh-notebook-controller/config/base/params.env"
          "components/odh-notebook-controller/makefile-vars.mk"
        )

        for FILE in "${FILES[@]}"; do
          if [[ -f "$FILE" && "$(git status --porcelain=v1 2>/dev/null | grep -c "$FILE")" -gt 0 ]]; then
            git checkout --ours "$FILE"
            git add "$FILE"
          fi
        done

        git commit -m "Merge $SOURCE_BRANCH into $TARGET_BRANCH with resolved conflicts" || echo "Nothing to commit"
        TIMESTAMP=$(date +'%Y%m%d%H%M%S')
        SYNC_BRANCH="sync__$SOURCE_BRANCH__$TARGET_BRANCH__$TIMESTAMP"
        git checkout -b $SYNC_BRANCH
        git push origin $SYNC_BRANCH
        echo "branch=$SYNC_BRANCH" >> $GITHUB_OUTPUT

    - name: Create a Pull Request
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        SYNC_BRANCH="${{ steps.merge.outputs.branch }}"
        gh pr create \
          --title "Sync $SOURCE_BRANCH into $TARGET_BRANCH" \
          --body ":robot: This is an automated PR generated by sync-branches-through-pr.yaml" \
          --base "$TARGET_BRANCH" \
          --head "$SYNC_BRANCH"
