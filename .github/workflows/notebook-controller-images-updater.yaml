# This workflow automatically updates the notebook controllers' image tags
name: Update Notebook Controllers' Image Tags
on:
  workflow_dispatch:
    inputs:
      branch-name:
        description: "Provide name of the branch, used to commit changes"
        required: true
        default: "main"
      organization:
        required: true
        description: "Owner of origin kubeflow repository"
        default: "opendatahub-io"
      generate-pr:
        description: "Generate a PR instead of merging changes directly"
        required: false
        default: "false"
  
env:
  REPO_OWNER: ${{ github.event.inputs.organization }}
  REPO_NAME: kubeflow
  BRANCH_NAME: ${{ github.event.inputs.branch-name }}
  GENERATE_PR: ${{ github.event.inputs.generate-pr }}
  TEMP_UPDATER_BRANCH: "update-notebook-controller-images-${{ github.sha }}" # Temporary branch name
  
jobs:
  update-notebook-controller-images:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write # Grant permission to create PRs

    steps:
    - name: Checkout branch
      uses: actions/checkout@v4
      with:
        ref: ${{ env.BRANCH_NAME }}
  
    - name: Configure Git
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "GitHub Actions"
  
    - name: Retrieve latest commit
      id: commit-id
      shell: bash
      run: |
        PAYLOAD=$(curl --silent -H 'Accept: application/vnd.github.v4.raw' https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/commits?sha=$BRANCH_NAME&per_page=1)
        echo "COMMIT_ID=$(echo $PAYLOAD | jq -r '.[0].sha[0:7]')" >> ${GITHUB_OUTPUT}
  
    - name: Extract version from branch-name
      id: version
      run: |
        if [[ "${{ env.BRANCH_NAME }}" == "main" ]]; then
          VERSION="main"
        else
          VERSION=$(echo "${{ env.BRANCH_NAME }}" | sed -E 's/^v([0-9]+\.[0-9]+)-.*/\1/')
  
          # Check if VERSION is empty, then assign the full branch name
          if [[ -z "$VERSION" ]]; then
            VERSION="${{ env.BRANCH_NAME }}"
          fi
        fi
        echo "VERSION=$VERSION" >> ${GITHUB_OUTPUT}
        echo "Extracted VERSION is: $VERSION"
  
    - name: Update related files
      id: apply-changes
      run: |
        COMMIT_ID=${{ steps.commit-id.outputs.COMMIT_ID }}
        VERSION=${{ steps.version.outputs.VERSION }}
        echo "Updating files in VERSION=${VERSION} with COMMIT_ID=${COMMIT_ID}"
        sed -E "s/(odh-kf-notebook-controller-image=quay\.io\/opendatahub\/kubeflow-notebook-controller:)[^: -]+(-)[^ ]+/\1$VERSION\2$COMMIT_ID/" -i components/notebook-controller/config/overlays/openshift/params.env
        sed -E "s/(odh-notebook-controller-image=quay\.io\/opendatahub\/odh-notebook-controller:)[^: -]+(-)[^ ]+/\1$VERSION\2$COMMIT_ID/" -i  components/odh-notebook-controller/config/base/params.env
        sed -E "s/(KF_TAG \?= )[^\-]+(-)[^ ]+/\1$VERSION\2$COMMIT_ID/" -i components/odh-notebook-controller/makefile-vars.mk
  
        git status
        if [[ $(git status --porcelain | wc -l) -gt 0 ]]; then
          echo "Changes detected, committing..."
          git add components/notebook-controller/config/overlays/openshift/params.env
          git add components/odh-notebook-controller/config/base/params.env
          git add components/odh-notebook-controller/makefile-vars.mk
          git commit -m ":robot: Update odh and notebook-controller with image ${VERSION}-${COMMIT_ID}"

          # Ensure we are up to date with the remote branch before pushing
          echo "Pulling latest changes from the remote branch..."
          git pull origin ${{ env.BRANCH_NAME }} --rebase # Pull the latest changes with rebase

          # Check if generate-pr is true, then open a PR
          if [[ "${{ env.GENERATE_PR }}" == "true" ]]; then
            echo "Creating a pull request..."

            # Create a new branch for the changes (optional)
            git checkout -b ${{ env.TEMP_UPDATER_BRANCH }}
            git push origin ${{ env.TEMP_UPDATER_BRANCH }}
            
            # Use GitHub CLI to create a PR
            gh pr create --repo https://github.com/$REPO_OWNER/$REPO_NAME.git \
              --title ":robot: Update odh and notebook-controller with image ${VERSION}-${COMMIT_ID}" \
              --body ":robot: This is an automated Pull Request created by \`/.github/workflows/notebook-controller-images-updater.yaml\`." \
              --head $REPO_OWNER:${{ env.TEMP_UPDATER_BRANCH }} \
              --base ${{ env.BRANCH_NAME }} \
              --label "automated"

            echo "Pull request created successfully."
          else
            echo "Pushing changes directly to the branch..."
            git push origin ${{ env.BRANCH_NAME }}
          fi
        else
          echo "No changes detected on ${{ env.BRANCH_NAME }}"
        fi
